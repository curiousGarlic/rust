# COMMON PROGRAMMING CONCEPTS

## Variables and Mutability

When a variable is immutable, once a value is bound to a name, you can’t change that value.

Even though compiler errors can be frustrating, they only mean your program isn’t safely doing what you want it to do yet.

In addition to allowing this value to change, mut conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable’s value.

Constants aren’t just immutable by default—they’re always immutable.

## Data Types

Two data type subsets: scalar and compound.

A scalar type represents a single value. Rust has 4 primary scalar types: integers, floating-point numbers, Booleans, and characters. 

An integer is a number without a fractional component.

Signed and unsigned refer to whether it’s possible for the number to be negative or positive—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned).
Each signed variant can store numbers from -(2n - 1) to 2n - 1 - 1 inclusive, where n is the number of bits that variant uses. So an i8 can store numbers from -(27) to 27 - 1, which equals -128 to 127. Unsigned variants can store numbers from 0 to 2n - 1, so a u8 can store numbers from 0 to 28 - 1, which equals 0 to 255.

The f32 type is a single-precision float, and f64 has double precision.

Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.

A tuple is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.
let tup: (i32, f64, u8) = (500, 6.4, 1);

Another way to have a collection of multiple values is with an array. Unlike a tuple, every element of an array must have the same type.

Arrays are useful when you want your data allocated on the stack rather than the heap or when you want to ensure you always have a fixed number of elements. An array isn’t as flexible as the vector type, though. A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. If you’re unsure whether to use an array or a vector, you should probably use a vector. 

An array is a single chunk of memory allocated on the stack. 

## Functions

Rust doesn’t care where you define your functions, only that they’re defined somewhere.

Functions can also be defined to have parameters, which are special variables that are part of a function’s signature. When a function has parameters, you can provide it with concrete values for those parameters. Technically, the concrete values are called arguments, but in casual conversation, people tend to use the words parameter and argument interchangeably for either the variables in a function’s definition or the concrete values passed in when you call a function.

Statements are instructions that perform some action and do not return a value. 
Expressions evaluate to a resulting value. 
Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value.


---

Convert temperatures between Fahrenheit and Celsius.
Generate the nth Fibonacci number.
Print the lyrics to the Christmas carol “The Twelve Days of Christmas,” taking advantage of the repetition in the song.

---

## Ownership

A scope is the range within a program for which an item is valid.

String literals -> a string value is hardcoded into a program.

